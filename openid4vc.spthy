theory OpenID4VCI
begin

builtins: hashing, asymmetric-encryption, signing

restriction Equality: "All x y #i. Eq(x,y) @i ==> x = y"
restriction OneKeyPairPerEntity: "All A #i #j. RegisterKeyPair(A)@i & RegisterKeyPair(A)@j ==> #i = #j"

// Register key
rule Register_pk:
    [ Fr(~ltk) ]
    --[RegisterKeyPair($A)]->
    [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)) ]

// Get key
// Adversary can always get any public key
rule Get_pk:
    [ !Pk(A, pubkey) ]
    -->
    [ Out(pubkey) ]

rule Reveal_ltk:
    [ !Ltk(A, ltk) ]
    --[ LtkReveal(A) ]->
    [ Out(ltk) ]

/*
    Modeling secure channal
*/

rule ChanOut_S:
        [ Out_S($A,$B,x) ]
        --[ ChanOut_S($A,$B,x) ]->
        [ !Sec($A,$B,x) ]

rule ChanIn_S:
        [ !Sec($A,$B,x) ]
      --[ ChanIn_S($A,$B,x) ]->
        [ In_S($A,$B,x) ]


// User enters claims in browser
// Browser sends POST request to issuer vis TLS
rule User_create_offer:
    [ ]
    --[User_created_offer($claims)]->
    [ Out_S($user, $issuer, <'create_offer',$claims>)]


// Init credential offer on issuer
// and send it to wallet e.g. scanning qr code
rule Issuer_credential_offer:
    let credential_offer = <~code, $issuer> in
    [ In_S($user, $issuer, <'create_offer',$claims>), Fr(~code)]
    --[Secret(~code)]->
    [ Out_S($issuer, $wallet, <'credential_offer',credential_offer>), St_iss_1($issuer,~code, $claims)]


// Wallet consumes offer and requests token
rule Wallet_token_req:
    let credential_offer = <~code, $issuer>
        token_req = ~code //token_req = <pkWal, ~code>
    in
    [ In_S($issuer, $wallet, <'credential_offer',credential_offer>) ]
    -->
    [ Out_S($wallet, $issuer, <'token_req',token_req>), St_wal_1($wallet, ~code)]

rule Issuer_token_res:
    let 
        sig = sign(~code, ~ltkIss)
        token = <sig,~code>
        token_req = ~code//<~client_id, ~code>
        token_res = <token, ~c_nounce>
    in
    [ In_S($wallet, $issuer, <'token_req',token_req>),
        !Ltk($issuer, ~ltkIss),
        Fr(~c_nounce), St_iss_1($issuer, ~code, $claims) ]
    --[Secret(token), Secret(~c_nounce)]->
    [ Out_S($issuer, $wallet, <'token_res',token_res>), St_iss_2($issuer, ~code, $claims, ~c_nounce) ]

rule Wallet_credential_request:
    let 
        token_res = <token, ~c_nounce>
        code = snd(token)
        sig = sign(~c_nounce, ~ltkWal)
        proof = <sig, ~c_nounce>
        credential_req = <token, proof>
    in
    [In_S($issuer, $wallet,<'token_res',token_res>),
        !Ltk($wallet,~ltkWal),
        St_wal_1($wallet, ~codeSt)]

    --[Eq(code, ~codeSt)]->
    [Out_S($wallet, $issuer,<'credential_req',credential_req>), St_wal_2($wallet, token)]

rule Issuer_credential_response:
    let
        credential_req = <token, proof>

        sig = sign(<pkIss, pkWal, $claims>, ~ltkIss)
        credential = <sig, <pkIss, pkWal, $claims>>
        credential_res = <credential, ~c_nounce>
    in
    [In_S($wallet, $issuer,<'credential_req',credential_req>),
        St_iss_2($issuer, ~code, $claims, ~c_nounce),
        !Ltk($issuer, ~ltkIss), !Pk($issuer, pkIss), !Pk($wallet, pkWal)]
    
    // token is code signed by Iss
    // proof is nounce signed by wall
    --[Eq(verify(fst(token), ~code, pkIss), true),
        Eq(verify(fst(proof), ~c_nounce, pkWal), true)]->

    [Out_S($issuer, $wallet, <'credential_res',credential_res>)]

    // At the end user checks credential and decides
    // to accept it or not

rule Wallet_accept_credential:
        let credential = <sig, pkIss, pkWal, claimsFromCredential>
            credential_res = <credential, ~c_nounce>
        in
        [In_S($issuer, $wallet, <'credential_res',credential_res>),
            !Ltk($wallet,~ltkWall), !Pk($wallet, pkWal),!Pk($issuer, pkIss)]

        --[Eq(verify(fst(credential), snd(credential), pkIss), true)]->

        [Out_S($wallet, $user, <'credential',credential>)]

rule User_accept_credential:
    let credential = <sig, pkIssFromCredential, pkWalFromCredential, claimsFromCredential>
    in
    [In_S($wallet, $user, <'credential',credential>)]
    --[Credential_is_issued_as(pkIssFromCredential, pkWalFromCredential, claimsFromCredential)]->
    [!Wallet_has(credential)]

rule User_Create_Presentation:
    []
    -->
    [Out_S($user, $verifier, <'create_presentation',$presentationClaims>) ]

// verifier creates request, stores it, shows qr code containing path to wallet
rule Verifier_shows_path_to_auth_req:
    [In_S($user, $verifier, <'create_presentation',$claims>),
         Fr(~corrId), Fr(~state), Fr(~nounce), Fr(~reference)]
    --[Secret(~corrId), Secret(~state), Secret(~nounce)]->
    [!St_ver_store_reqest($presentationClaims, ~state, ~nounce, ~reference),
        Out_S($verifier, $wallet, <'scan_presentation_uri',~reference>)//this is scanning qr code
    ]

// wallet send GET request to reference url
rule Wallet_asks_for_auth_req:
    [In_S($verifier, $wallet, <'scan_presentation_uri',~reference>)]
    -->
    [Out_S($wallet, $verifier, <'presentation_uri',~reference>)]// this is GET req via TLS

rule Verifier_sends_auth_req:
    let sig = sign(<~nounce,~state>, ~ltkVer)
        authReq = <sig, ~nounce, ~state>
    in
    [In_S($wallet, $verifier, <'presentation_uri',~reference>),
    !St_ver_store_reqest($presentationClaims, ~state, ~nounce, ~reference),
    !Ltk($verifier,~ltkVer)]
    -->
    [Out_S($verifier, $wallet, <'auth_req',authReq>)]

rule Wallet_sends_auth_res:
    let credential = <sigCredential, pkIssFromCredential, pkWalFromCredential, claimsFromCredential>
        authReq = <sigAuthReq, ~nounce, ~state>
        sigAuthRes = sign(<~nounce, ~state, credential,pkWal>,~ltkWal)
        authRes = <sigAuthRes,~nounce, ~state, credential,pkWal>
    in
    [In_S($verifier, $wallet, <'auth_req',authReq>),
        !Wallet_has(credential),
        !Pk($wallet, pkWal),!Pk($verifier, pkVer), !Ltk($wallet, ~ltkWal)]
    --[/*provjeri je li auth req ispravno potpisan od verifiera*/
        Eq(verify(fst(authReq), snd(authReq), pkVer), true)]->
    [Out_S($wallet, $verifier, <'auth_res',authRes>)]

rule Verifier_consumes_response:
    let credentialRecv = <sigCredentialRecv, pkIssFromCredentialRecv, pkWalFromCredentialRecv, claimsFromCredentialRecv>
        authRes = <sigAuthRes,~nounce, ~state, credentialRecv,pkWal>
    in
    [In_S($wallet, $verifier, <'auth_res',authRes>),
        !St_ver_store_reqest($presentationClaims, ~state, ~nounce, ~reference),
        !Pk($wallet, pkWal),!Pk($issuer, pkIss)]

    --[/*provjeri je li authRes potpisan od walleta*/
        Eq(verify(fst(authRes), snd(authRes), pkWal), true),
        /*provjeri je li credential potpisan od issuera*/
        Eq(verify(fst(credentialRecv), snd(credentialRecv), pkIss), true),
        Finish()]->

    []
    

lemma executable:
    exists-trace
    " Ex #i. Finish()@i
        & not (Ex b #k. LtkReveal(b)@k)"

lemma autentific_claims:
    "All pkIss pkWal claimsFromCredential #i. Credential_is_issued_as(pkIss, pkWal, claimsFromCredential)@i
    ==> Ex claims #j. User_created_offer(claims)@j 
    & j<i 
    & claims=claimsFromCredential"

lemma secret:
    " All x #i. Secret(x)@i ==> not (Ex #j. K(x)@j) "
